@model AdviceAdmin.UI.Models.FailedRebalanceReportViewModel
@Scripts.Render("~/bundles/failedrebalancereport")

@{
    ViewBag.Title = "Failed Rebalance Report";

    string prefix = Html.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(Model.FilterCriteriaModel.ModelPropertyName);
    ViewDataDictionary viewData = new ViewDataDictionary(Html.ViewData)
    {
        TemplateInfo = new TemplateInfo { HtmlFieldPrefix = prefix }
    };
}
<div>
    @using (Html.BeginForm())
    {
        <div class="dv-bg" style="padding-bottom:0px!important">

            <div id="divError" class="row" style="padding-left: 17px;">
                <b> @Html.ValidationSummary(false, "", new { id = "validationSummary", @class = "text-danger" })</b>
            </div>

            <div class="form-group">

                @Html.AntiForgeryToken()

                @Html.Partial("_FilterCriteriaPartialView", Model.FilterCriteriaModel, viewData)
            </div>
        </div>
        <br>
        <div class="text-right">
            <input type="submit" value="Submit" id="Submit" name="action:Submit" class="aa-btn-primary btn" />
            <input type="submit" @Model.ExcelDisabled value="Export To Excel" name="action:Export" class="aa-btn-primary btn" />
        </div>
    }

</div>

<br />
<div id="failedRebalanceList">
    @{Html.RenderPartial("_DetailedReportsPartialView", @Model);}
</div>

<br />

Blob storage

Binary Large OBject storage offered by Microsoft azure as a storage service is used to store collection of Binary Data or objects such as images, videos, and sound. Now such data been non-structured in nature are categorized as Objects and are as stored as a single entity under the Azure umbrella. 

Lets say, we have a requirement of storing all the old Physical Hard File documents for a Goverment system online, we can either simply scan and then store the image or pdf files on the IIS Server, then possibly residing under the new applications directory, turning the response time to be slow. OR Use the storage service of Azure for storing such massive amounts of unstructured scallable data and leveraging your new application to support uploading, streaming and downloading straight from BLOB Storage. Well, random access to application data from anywhere is too a big, YES!

Azure seemlessly manages the BLOB Objects access by using Tiers.

1.    Hot Tier
2. Cool Tier
3. Archive Tier
4. Premium Tier


